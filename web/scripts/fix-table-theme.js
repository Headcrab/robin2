// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ç–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã

console.log('Fix table theme script loaded');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
function checkDataTableTheme() {
    console.log('\n=== DATA TABLE THEME CHECK ===');
    
    const table = document.querySelector('.data-table');
    if (!table) {
        console.warn('‚ùå .data-table not found');
        return;
    }
    
    console.log('‚úÖ Table found:', table);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    console.log('Current theme:', currentTheme);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headers = table.querySelectorAll('thead th');
    console.log(`Found ${headers.length} headers:`);
    
    headers.forEach((th, index) => {
        const text = th.textContent.trim();
        const styles = window.getComputedStyle(th);
        console.log(`Header ${index + 1}: "${text}"`);
        console.log(`  - Background: ${styles.backgroundColor}`);
        console.log(`  - Color: ${styles.color}`);
        console.log(`  - Font-weight: ${styles.fontWeight}`);
        console.log(`  - Text-transform: ${styles.textTransform}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const rows = table.querySelectorAll('tbody tr');
    console.log(`Found ${rows.length} table rows`);
    
    if (rows.length > 0) {
        const firstRow = rows[0];
        const firstRowStyles = window.getComputedStyle(firstRow);
        console.log('First row styles:');
        console.log(`  - Background: ${firstRowStyles.backgroundColor}`);
        console.log(`  - Color: ${firstRowStyles.color}`);
    }
    
    console.log('=== END TABLE CHECK ===\n');
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ —Ç–∞–±–ª–∏—Ü–µ
function forceTableTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    console.log('Forcing table theme:', currentTheme);
    
    const table = document.querySelector('.data-table');
    if (!table) {
        console.warn('Table not found for theme forcing');
        return;
    }
    
    // –£–±–∏—Ä–∞–µ–º –∏ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
    table.classList.remove('data-table');
    setTimeout(() => {
        table.classList.add('data-table');
        console.log('Table theme forced');
        checkDataTableTheme();
    }, 100);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function checkTableTranslations() {
    console.log('\n=== TABLE TRANSLATIONS CHECK ===');
    
    const expectedTranslations = {
        'ru': ['–í–†–ï–ú–Ø', '–¢–ï–ì', '–ó–ù–ê–ß–ï–ù–ò–ï', '–ö–ê–ß–ï–°–¢–í–û', '–ï–î–ò–ù–ò–¶–ê', '–û–ü–ò–°–ê–ù–ò–ï'],
        'kk': ['–£–ê“ö–´–¢', '–¢–ï–ì', '–ú”ò–ù', '–°–ê–ü–ê', '”®–õ–®–ï–ú –ë–Ü–†–õ–Ü–ì–Ü', '–°–ò–ü–ê–¢–¢–ê–ú–ê'],
        'en': ['TIME', 'TAG', 'VALUE', 'QUALITY', 'UNIT', 'DESCRIPTION']
    };
    
    const currentLang = localStorage.getItem('selectedLanguage') || 'ru';
    const expected = expectedTranslations[currentLang];
    
    const headers = document.querySelectorAll('.data-table thead th');
    
    console.log(`Current language: ${currentLang}`);
    console.log(`Expected headers: ${expected.join(', ')}`);
    console.log('Actual headers:');
    
    headers.forEach((th, index) => {
        const text = th.textContent.trim().toUpperCase();
        const expectedText = expected[index];
        const isCorrect = text === expectedText;
        
        console.log(`${index + 1}. "${text}" ${isCorrect ? '‚úÖ' : '‚ùå'} (expected: "${expectedText}")`);
    });
    
    console.log('=== END TRANSLATIONS CHECK ===\n');
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function fixHeaderStyles() {
    console.log('Fixing header styles...');
    
    const headers = document.querySelectorAll('.data-table thead th');
    
    headers.forEach((th, index) => {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        th.style.cssText = `
            color: white !important;
            background: transparent !important;
            font-weight: 700 !important;
            font-size: 0.8rem !important;
            text-transform: uppercase !important;
            letter-spacing: 0.08em !important;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif !important;
        `;
    });
    
    console.log('Header styles fixed');
}

// –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
function diagnoseTable() {
    console.log('\nüîç FULL TABLE DIAGNOSTICS üîç');
    
    checkDataTableTheme();
    checkTableTranslations();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Ñ–∞–π–ª–æ–≤
    const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
    console.log('Loaded stylesheets:');
    stylesheets.forEach((link, index) => {
        console.log(`${index + 1}. ${link.href}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ theme manager
    console.log('Theme manager available:', !!window.themeManager);
    console.log('I18n manager available:', !!window.i18nManager);
    
    console.log('üîç END DIAGNOSTICS üîç\n');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
function autoFixTable() {
    console.log('üõ†Ô∏è AUTO-FIXING TABLE...');
    
    // 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    fixHeaderStyles();
    
    // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
    forceTableTheme();
    
    // 3. –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
    if (window.i18nManager) {
        window.i18nManager.updateTranslations();
    }
    
    // 4. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    setTimeout(diagnoseTable, 1000);
    
    console.log('üõ†Ô∏è AUTO-FIX COMPLETED');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.checkDataTableTheme = checkDataTableTheme;
window.forceTableTheme = forceTableTheme;
window.checkTableTranslations = checkTableTranslations;
window.fixHeaderStyles = fixHeaderStyles;
window.diagnoseTable = diagnoseTable;
window.autoFixTable = autoFixTable;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(diagnoseTable, 2000); 