// internationalization module

class I18nManager {
    constructor() {
        this.currentLang = 'ru';
        this.translations = {};
        this.languages = {
            ru: {
                name: '–†—É—Å—Å–∫–∏–π',
                nativeName: '–†—É—Å—Å–∫–∏–π',
                flag: 'üá∑üá∫'
            },
            kk: {
                name: '“ö–∞–∑–∞“õ—à–∞',
                nativeName: '“ö–∞–∑–∞“õ—à–∞', 
                flag: 'üá∞üáø'
            },
            en: {
                name: 'English',
                nativeName: 'English',
                flag: 'üá∫üá∏'
            }
        };
        this.init();
    }

    async init() {
        console.log('–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18nManager...');
        
        // load translations first
        await this.loadTranslations();
        console.log('–ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        
        // load saved language from localStorage
        const savedLang = localStorage.getItem('language') || this.detectBrowserLanguage();
        console.log('—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞:', savedLang);
        
        this.setLanguage(savedLang);
        
        console.log('i18nManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    detectBrowserLanguage() {
        const browserLang = navigator.language || navigator.userLanguage;
        if (browserLang.startsWith('kk')) return 'kk';
        if (browserLang.startsWith('en')) return 'en';
        return 'ru'; // default
    }

    async loadTranslations() {
        // define translations inline for now - flat structure
        this.translations = {
            ru: {
                nav: {
                    home: '–ì–ª–∞–≤–Ω–∞—è',
                    data: '–î–∞–Ω–Ω—ã–µ', 
                    tags: '–¢–µ–≥–∏',
                    logs: '–õ–æ–≥–∏',
                    docs: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                    api: 'API'
                },
                
                common: {
                    loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                    error: '–û—à–∏–±–∫–∞',
                    success: '–£—Å–ø–µ—à–Ω–æ',
                    search: '–ü–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ...',
                    export: '–≠–∫—Å–ø–æ—Ä—Ç',
                    clear: '–û—á–∏—Å—Ç–∏—Ç—å',
                    refresh: '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
                    close: '–ó–∞–∫—Ä—ã—Ç—å',
                    cancel: '–û—Ç–º–µ–Ω–∞',
                    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                    delete: '–£–¥–∞–ª–∏—Ç—å',
                    edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                    view: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
                    copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
                    system: '–°–∏—Å—Ç–µ–º–∞',
                    quick_actions: '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è'
                },
                
                home: {
                    title: '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ê–°–£–¢–ü',
                    subtitle: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                    recent_activity: '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    system_health: '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                    stats: {
                        active_tags: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤',
                        data_records: '–ó–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö',
                        system_status: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'
                    }
                },
                
                data: {
                    title: '–î–∞–Ω–Ω—ã–µ –ê–°–£–¢–ü',
                    subtitle: '–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–≥–∞–º',
                    search_params: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
                    tag: '–¢–µ–≥',
                    tag_placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞',
                    date_from: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
                    date_to: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                    record_count: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
                    find_data: '–ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ',
                    search_results: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
                    export_data: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                    table: {
                        time: '–í—Ä–µ–º—è',
                        tag: '–¢–µ–≥',
                        value: '–ó–Ω–∞—á–µ–Ω–∏–µ',
                        quality: '–ö–∞—á–µ—Å—Ç–≤–æ',
                        unit: '–ï–¥–∏–Ω–∏—Ü–∞',
                        description: '–û–ø–∏—Å–∞–Ω–∏–µ'
                    }
                },
                
                tags: {
                    title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏',
                    subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
                    search: '–ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤',
                    search_mask: '–ú–∞—Å–∫–∞ –ø–æ–∏—Å–∫–∞',
                    search_placeholder: '–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: A20_*)',
                    find_tags: '–ù–∞–π—Ç–∏ —Ç–µ–≥–∏',
                    found_tags: '–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏'
                },
                
                logs: {
                    title: '–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã',
                    subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π',
                    log_entries: '–ó–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤',
                    refresh_logs: '–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏',
                    export_logs: '–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤',
                    clear_logs: '–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏'
                },
                
                docs: {
                    title: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                    subtitle: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                    available_docs: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
                    back_to_list: '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'
                },
                
                api: {
                    title: 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
                },
                
                status: {
                    working: '–†–∞–±–æ—Ç–∞–µ—Ç',
                    error: '–û—à–∏–±–∫–∞',
                    checking: '–ü—Ä–æ–≤–µ—Ä–∫–∞...',
                    connection_error: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏',
                    system_status: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'
                },
                
                theme: {
                    light: '–°–≤–µ—Ç–ª–∞—è',
                    dark: '–¢–µ–º–Ω–∞—è',
                    toggle: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É'
                },
                
                lang: {
                    switch: '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
                }
            },
            
            kk: {
                nav: {
                    home: '–ë–∞—Å—Ç—ã –±–µ—Ç',
                    data: '–î–µ—Ä–µ–∫—Ç–µ—Ä',
                    tags: '–¢–µ–≥—Ç–µ—Ä',
                    logs: '–õ–æ–≥—Ç–µ—Ä',
                    docs: '“ö“±–∂–∞—Ç—Ç–∞–º–∞',
                    api: 'API'
                },
                
                common: {
                    loading: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
                    error: '“ö–∞—Ç–µ',
                    success: '–°”ô—Ç—Ç—ñ',
                    search: '–Ü–∑–¥–µ—É...',
                    export: '–≠–∫—Å–ø–æ—Ä—Ç',
                    clear: '–¢–∞–∑–∞—Ä—Ç—É',
                    refresh: '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–∞“£–∞—Ä—Ç—É',
                    close: '–ñ–∞–±—É',
                    cancel: '–ë–æ–ª–¥—ã—Ä–º–∞—É',
                    save: '–°–∞“õ—Ç–∞—É',
                    delete: '–ñ–æ—é',
                    edit: '”®“£–¥–µ—É',
                    view: '“ö–∞—Ä–∞—É',
                    copy: '–ö”©—à—ñ—Ä—É',
                    system: '–ñ“Ø–π–µ',
                    quick_actions: '–ñ—ã–ª–¥–∞–º ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä'
                },
                
                home: {
                    title: '–ê–°–£–¢–ü –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∞–ª—É –∂“Ø–π–µ—Å—ñ',
                    subtitle: '”®–Ω–¥—ñ—Ä—ñ—Å—Ç—ñ–∫ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –±–∞“õ—ã–ª–∞—É –∂”ô–Ω–µ –±–∞—Å“õ–∞—Ä—É “Ø—à—ñ–Ω –∑–∞–º–∞–Ω–∞—É–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                    recent_activity: '–°–æ“£“ì—ã ”ô—Ä–µ–∫–µ—Ç',
                    system_health: '–ñ“Ø–π–µ –¥–µ–Ω—Å–∞—É–ª—ã“ì—ã',
                    stats: {
                        active_tags: '–ë–µ–ª—Å–µ–Ω–¥—ñ —Ç–µ–≥—Ç–µ—Ä',
                        data_records: '–î–µ—Ä–µ–∫—Ç–µ—Ä –∂–∞–∑–±–∞–ª–∞—Ä—ã',
                        system_status: '–ñ“Ø–π–µ –∫“Ø–π—ñ'
                    }
                },
                
                data: {
                    title: '–ê–°–£–¢–ü –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ',
                    subtitle: '–¢–µ–≥—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —ñ–∑–¥–µ—É –∂”ô–Ω–µ —Ç–∞–ª–¥–∞—É',
                    search_params: '–Ü–∑–¥–µ—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ',
                    tag: '–¢–µ–≥',
                    tag_placeholder: '–¢–µ–≥ –∞—Ç–∞—É—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑',
                    date_from: '–ë–∞—Å—Ç–∞–ª—É –∫“Ø–Ω—ñ',
                    date_to: '–ê—è“õ—Ç–∞–ª—É –∫“Ø–Ω—ñ',
                    record_count: '–ñ–∞–∑–±–∞–ª–∞—Ä —Å–∞–Ω—ã',
                    find_data: '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Ç–∞–±—É',
                    search_results: '–Ü–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ',
                    export_data: '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —ç–∫—Å–ø–æ—Ä—Ç—Ç–∞—É',
                    table: {
                        time: '–£–∞“õ—ã—Ç',
                        tag: '–¢–µ–≥',
                        value: '–ú”ô–Ω',
                        quality: '–°–∞–ø–∞',
                        unit: '”®–ª—à–µ–º –±—ñ—Ä–ª—ñ–≥—ñ',
                        description: '–°–∏–ø–∞—Ç—Ç–∞–º–∞'
                    }
                },
                
                tags: {
                    title: '–¢–µ–≥—Ç–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É',
                    subtitle: '–ñ“Ø–π–µ–Ω—ñ“£ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ —Ç–µ–≥—Ç–µ—Ä—ñ–Ω “õ–∞—Ä–∞—É –∂”ô–Ω–µ —ñ–∑–¥–µ—É',
                    search: '–¢–µ–≥—Ç–µ—Ä–¥—ñ —ñ–∑–¥–µ—É',
                    search_mask: '–Ü–∑–¥–µ—É –º–∞—Å–∫–∞—Å—ã',
                    search_placeholder: '–¢–µ–≥—Ç–µ—Ä–¥—ñ —ñ–∑–¥–µ—É “Ø—à—ñ–Ω –º–∞—Å–∫–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: A20_*)',
                    find_tags: '–¢–µ–≥—Ç–µ—Ä–¥—ñ —Ç–∞–±—É',
                    found_tags: '–¢–∞–±—ã–ª“ì–∞–Ω —Ç–µ–≥—Ç–µ—Ä'
                },
                
                logs: {
                    title: '–ñ“Ø–π–µ –ª–æ–≥—Ç–∞—Ä—ã',
                    subtitle: '–ñ“Ø–π–µ–ª—ñ–∫ –ª–æ–≥—Ç–∞—Ä –º–µ–Ω –æ“õ–∏“ì–∞–ª–∞—Ä–¥—ã “õ–∞—Ä–∞—É',
                    log_entries: '–õ–æ–≥ –∂–∞–∑–±–∞–ª–∞—Ä—ã',
                    refresh_logs: '–õ–æ–≥—Ç–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç—É',
                    export_logs: '–õ–æ–≥—Ç–∞—Ä–¥—ã —ç–∫—Å–ø–æ—Ä—Ç—Ç–∞—É',
                    clear_logs: '–õ–æ–≥—Ç–∞—Ä–¥—ã —Ç–∞–∑–∞—Ä—Ç—É'
                },
                
                docs: {
                    title: '“ö“±–∂–∞—Ç—Ç–∞–º–∞',
                    subtitle: '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ“±–∂–∞—Ç—Ç–∞–º–∞ –∂”ô–Ω–µ –∂–æ–±–∞ –Ω“±—Å“õ–∞—É–ª—ã“õ—Ç–∞—Ä—ã',
                    available_docs: '“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ “õ“±–∂–∞—Ç—Ç–∞—Ä',
                    back_to_list: '–¢—ñ–∑—ñ–º–≥–µ “õ–∞–π—Ç—É'
                },
                
                api: {
                    title: 'API “õ“±–∂–∞—Ç—Ç–∞–º–∞—Å—ã'
                },
                
                status: {
                    working: '–ñ“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä',
                    error: '“ö–∞—Ç–µ',
                    checking: '–¢–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...',
                    connection_error: '–ë–∞–π–ª–∞–Ω—ã—Å “õ–∞—Ç–µ—Å—ñ',
                    system_status: '–ñ“Ø–π–µ –∫“Ø–π—ñ'
                },
                
                theme: {
                    light: '–ê—à—ã“õ',
                    dark: '“ö–∞—Ä–∞“£“ì—ã',
                    toggle: '–¢–∞“õ—ã—Ä—ã–ø—Ç—ã –∞—É—ã—Å—Ç—ã—Ä—É'
                },
                
                lang: {
                    switch: '–¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É'
                }
            },
            
            en: {
                nav: {
                    home: 'Home',
                    data: 'Data',
                    tags: 'Tags',
                    logs: 'Logs',
                    docs: 'Documentation',
                    api: 'API'
                },
                
                common: {
                    loading: 'Loading...',
                    error: 'Error',
                    success: 'Success',
                    search: 'Search...',
                    export: 'Export',
                    clear: 'Clear',
                    refresh: 'Refresh data',
                    close: 'Close',
                    cancel: 'Cancel',
                    save: 'Save',
                    delete: 'Delete',
                    edit: 'Edit',
                    view: 'View',
                    copy: 'Copy',
                    system: 'System',
                    quick_actions: 'Quick actions'
                },
                
                home: {
                    title: 'SCADA Data Acquisition System',
                    subtitle: 'Modern interface for monitoring and managing industrial data',
                    recent_activity: 'Recent Activity',
                    system_health: 'System Health',
                    stats: {
                        active_tags: 'Active Tags',
                        data_records: 'Data Records',
                        system_status: 'System Status'
                    }
                },
                
                data: {
                    title: 'SCADA Data',
                    subtitle: 'Search and analyze tag data',
                    search_params: 'Search Parameters',
                    tag: 'Tag',
                    tag_placeholder: 'Enter tag name',
                    date_from: 'Start Date',
                    date_to: 'End Date',
                    record_count: 'Record Count',
                    find_data: 'Find Data',
                    search_results: 'Search Results',
                    export_data: 'Export data',
                    table: {
                        time: 'Time',
                        tag: 'Tag',
                        value: 'Value',
                        quality: 'Quality',
                        unit: 'Unit',
                        description: 'Description'
                    }
                },
                
                tags: {
                    title: 'Tag Management',
                    subtitle: 'View and search available system tags',
                    search: 'Tag Search',
                    search_mask: 'Search Mask',
                    search_placeholder: 'Enter mask to search tags (e.g.: A20_*)',
                    find_tags: 'Find Tags',
                    found_tags: 'Found Tags'
                },
                
                logs: {
                    title: 'System Logs',
                    subtitle: 'View system logs and events',
                    log_entries: 'Log Entries',
                    refresh_logs: 'Refresh logs',
                    export_logs: 'Export logs',
                    clear_logs: 'Clear logs'
                },
                
                docs: {
                    title: 'Documentation',
                    subtitle: 'Technical documentation and project guides',
                    available_docs: 'Available Documents',
                    back_to_list: 'Back to List'
                },
                
                api: {
                    title: 'API Documentation'
                },
                
                status: {
                    working: 'Working',
                    error: 'Error',
                    checking: 'Checking...',
                    connection_error: 'Connection Error',
                    system_status: 'System Status'
                },
                
                theme: {
                    light: 'Light',
                    dark: 'Dark',
                    toggle: 'Toggle Theme'
                },
                
                lang: {
                    switch: 'Switch Language'
                }
            }
        };
    }

    setLanguage(lang) {
        if (!this.languages[lang]) {
            console.warn(`Language ${lang} not found`);
            return;
        }

        this.currentLang = lang;
        
        // save to localStorage
        localStorage.setItem('language', lang);
        
        // update document lang attribute
        document.documentElement.setAttribute('lang', lang);
        
        // update all translatable elements
        this.updateTranslations();
        
        // update language selector
        this.updateLanguageSelector();
        
        // dispatch event for other components
        window.dispatchEvent(new CustomEvent('languageChanged', {
            detail: { language: lang }
        }));
        
        // update theme button title with new language
        if (window.themeManager) {
            window.themeManager.updateThemeButton();
        }
        
        console.log(`Language changed to: ${lang}`);
    }

    updateTranslations() {
        // find all elements with data-i18n attribute
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(element => {
            const key = element.getAttribute('data-i18n');
            const translation = this.t(key);
            if (translation) {
                element.textContent = translation;
            }
        });

        // update placeholders
        const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
        placeholderElements.forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            const translation = this.t(key);
            if (translation) {
                element.setAttribute('placeholder', translation);
            }
        });

        // update titles  
        const titleElements = document.querySelectorAll('[data-i18n-title]');
        titleElements.forEach(element => {
            const key = element.getAttribute('data-i18n-title');
            const translation = this.t(key);
            if (translation) {
                element.setAttribute('title', translation);
            }
        });
    }

    updateLanguageSelector() {
        const langBtn = document.getElementById('language-toggle');
        if (langBtn) {
            const currentLangData = this.languages[this.currentLang];
            langBtn.innerHTML = `
                <span class="mr-1">${currentLangData.flag}</span>
                <span class="hidden sm:inline text-sm">${this.currentLang.toUpperCase()}</span>
                <svg class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
            `;
            langBtn.title = this.t('lang.switch');
        }

        // update dropdown if exists
        const dropdown = document.getElementById('language-dropdown');
        if (dropdown) {
            Object.keys(this.languages).forEach(lang => {
                const option = dropdown.querySelector(`[data-lang="${lang}"]`);
                if (option) {
                    option.classList.toggle('active', lang === this.currentLang);
                    if (lang === this.currentLang) {
                        option.style.backgroundColor = 'var(--accent-primary)';
                        option.style.color = 'white';
                    } else {
                        option.style.backgroundColor = '';
                        option.style.color = '';
                    }
                }
            });
        }
    }

    t(key, params = {}) {
        if (!this.translations || !this.translations[this.currentLang]) {
            console.warn(`Translations not loaded for language: ${this.currentLang}`);
            return key;
        }
        
        const keys = key.split('.');
        let value = this.translations[this.currentLang];
        
        for (const k of keys) {
            if (value && typeof value === 'object') {
                value = value[k];
            } else {
                value = undefined;
                break;
            }
        }
        
        if (typeof value !== 'string') {
            console.warn(`Translation not found: ${key} for language: ${this.currentLang}`, this.translations[this.currentLang]);
            return key; // fallback to key
        }
        
        // simple parameter replacement
        let result = value;
        Object.keys(params).forEach(param => {
            result = result.replace(new RegExp(`{${param}}`, 'g'), params[param]);
        });
        
        return result;
    }

    getCurrentLanguage() {
        return this.currentLang;
    }

    getLanguages() {
        return this.languages;
    }
}

// create global instance
const i18nManager = new I18nManager();

// export functions for global access
function setLanguage(lang) {
    i18nManager.setLanguage(lang);
}

function getCurrentLanguage() {
    return i18nManager.getCurrentLanguage();
}

function getLanguages() {
    return i18nManager.getLanguages();
}

function t(key, params = {}) {
    return i18nManager.t(key, params);
}

function updateTranslations() {
    i18nManager.updateTranslations();
}

export { 
    setLanguage, 
    getCurrentLanguage, 
    getLanguages,
    t,
    updateTranslations,
    i18nManager
}; 